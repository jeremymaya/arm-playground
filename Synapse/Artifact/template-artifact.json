{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "workspaceName": {
            "type": "string",
            "metadata": "Workspace name",
            "defaultValue": "synapse-test-actions"
        },
        "synapse-test-actions-WorkspaceDefaultSqlServer_connectionString": {
            "type": "secureString",
            "metadata": "Secure string for 'connectionString' of 'synapse-test-actions-WorkspaceDefaultSqlServer'"
        },
        "synapse-test-actions-WorkspaceDefaultStorage_properties_typeProperties_url": {
            "type": "string",
            "defaultValue": "https://sttestactions.dfs.core.windows.net"
        },
        "ls_kv_actions_usea_properties_typeProperties_baseUrl": {
            "type": "string",
            "defaultValue": "https://sttestactions.dfs.core.windows.net"
        },
        "ls_cosmosdb_devops_usea_properties_typeProperties_connectionString_secretName": {
            "type": "string",
            "defaultValue": "cosmosdb-test-devops-primary-connection"
        }
    },
    "variables": {
        "workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
    },
    "resources": [
        {
            "name": "[concat(parameters('workspaceName'), '/synapse-test-actions-WorkspaceDefaultSqlServer')]",
            "type": "Microsoft.Synapse/workspaces/linkedServices",
            "apiVersion": "2019-06-01-preview",
            "properties": {
                "parameters": {
                    "DBName": {
                        "type": "String"
                    }
                },
                "annotations": [],
                "type": "AzureSqlDW",
                "typeProperties": {
                    "connectionString": "[parameters('synapse-test-actions-WorkspaceDefaultSqlServer_connectionString')]"
                },
                "connectVia": {
                    "referenceName": "AutoResolveIntegrationRuntime",
                    "type": "IntegrationRuntimeReference"
                }
            },
            "dependsOn": [
                "[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
            ]
        },
        {
            "name": "[concat(parameters('workspaceName'), '/synapse-test-actions-WorkspaceDefaultStorage')]",
            "type": "Microsoft.Synapse/workspaces/linkedServices",
            "apiVersion": "2019-06-01-preview",
            "properties": {
                "annotations": [],
                "type": "AzureBlobFS",
                "typeProperties": {
                    "url": "[parameters('synapse-test-actions-WorkspaceDefaultStorage_properties_typeProperties_url')]"
                },
                "connectVia": {
                    "referenceName": "AutoResolveIntegrationRuntime",
                    "type": "IntegrationRuntimeReference"
                }
            },
            "dependsOn": [
                "[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
            ]
        },
        {
            "name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
            "type": "Microsoft.Synapse/workspaces/integrationRuntimes",
            "apiVersion": "2019-06-01-preview",
            "properties": {
                "type": "Managed",
                "typeProperties": {
                    "computeProperties": {
                        "location": "AutoResolve",
                        "dataFlowProperties": {
                            "computeType": "General",
                            "coreCount": 8,
                            "timeToLive": 0
                        }
                    }
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('workspaceName'), '/ls_kv_actions_usea')]",
            "type": "Microsoft.Synapse/workspaces/linkedServices",
            "apiVersion": "2019-06-01-preview",
            "properties": {
                "annotations": [],
                "type": "AzureKeyVault",
                "typeProperties": {
                    "baseUrl": "[parameters('ls_kv_actions_usea_properties_typeProperties_baseUrl')]"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('workspaceName'), '/ls_cosmosdb_devops_usea')]",
            "type": "Microsoft.Synapse/workspaces/linkedServices",
            "apiVersion": "2019-06-01-preview",
            "properties": {
                "annotations": [],
                "type": "CosmosDb",
                "typeProperties": {
                    "connectionString": {
                        "type": "AzureKeyVaultSecret",
                        "store": {
                            "referenceName": "ls_kv_actions_usea",
                            "type": "LinkedServiceReference"
                        },
                        "secretName": "[parameters('ls_cosmosdb_devops_usea_properties_typeProperties_connectionString_secretName')]"
                    }
                },
                "connectVia": {
                    "referenceName": "AutoResolveIntegrationRuntime",
                    "type": "IntegrationRuntimeReference"
                }
            },
            "dependsOn": [
                "[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
                "[concat(variables('workspaceId'), '/linkedServices/ls_kv_actions_usea')]"
            ]
        },
        {
            "name": "[concat(parameters('workspaceName'), '/nb-hello-world')]",
            "type": "Microsoft.Synapse/workspaces/notebooks",
            "apiVersion": "2019-06-01-preview",
            "properties": {
                "nbformat": 4,
                "nbformat_minor": 2,
                "bigDataPool": {
                    "referenceName": "spsmall",
                    "type": "BigDataPoolReference"
                },
                "sessionProperties": {
                    "driverMemory": "28g",
                    "driverCores": 4,
                    "executorMemory": "28g",
                    "executorCores": 4,
                    "numExecutors": 2,
                    "conf": {
                        "spark.dynamicAllocation.enabled": "false",
                        "spark.dynamicAllocation.minExecutors": "2",
                        "spark.dynamicAllocation.maxExecutors": "2"
                    }
                },
                "metadata": {
                    "saveOutput": true,
                    "synapse_widget": {
                        "version": "0.1",
                        "state": {}
                    },
                    "kernelspec": {
                        "name": "synapse_spark",
                        "display_name": "Synapse Spark"
                    },
                    "language_info": {
                        "name": "scala"
                    },
                    "a365ComputeOptions": {
                        "id": "/subscriptions/f52fc92a-79db-44fb-850e-cb974fbede99/resourceGroups/synapse-via-actions/providers/Microsoft.Synapse/workspaces/synapse-test-actions/bigDataPools/spsmall",
                        "name": "spsmall",
                        "type": "Spark",
                        "endpoint": "https://synapse-test-actions.dev.azuresynapse.net/livyApi/versions/2020-12-01/sparkPools/spsmall",
                        "auth": {
                            "type": "AAD",
                            "authResource": "https://dev.azuresynapse.net"
                        },
                        "sparkVersion": "2.4",
                        "nodeCount": 10,
                        "cores": 4,
                        "memory": 28,
                        "automaticScaleJobs": false
                    },
                    "sessionKeepAliveTimeout": 30
                },
                "cells": [
                    {
                        "cell_type": "code",
                        "metadata": {},
                        "source": [
                            "println(\"hello world!\")"
                        ],
                        "outputs": [],
                        "execution_count": null
                    }
                ]
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('workspaceName'), '/ds_cosmosdb_devops_usea')]",
            "type": "Microsoft.Synapse/workspaces/datasets",
            "apiVersion": "2019-06-01-preview",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "ls_cosmosdb_devops_usea",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "CosmosDbSqlApiCollection",
                "schema": {},
                "typeProperties": {
                    "collectionName": "sandbox"
                }
            },
            "dependsOn": [
                "[concat(variables('workspaceId'), '/linkedServices/ls_cosmosdb_devops_usea')]"
            ]
        },
        {
            "name": "[concat(parameters('workspaceName'), '/ds_adls2_sttestactions_usea')]",
            "type": "Microsoft.Synapse/workspaces/datasets",
            "apiVersion": "2019-06-01-preview",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "synapse-test-actions-WorkspaceDefaultStorage",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "bucket": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "type": "Json",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": {
                            "value": "@concat('friends_', substring(subtractFromTime(startOfHour(pipeline().TriggerTime), 1, 'Day'), 0, 4), '_', substring(subtractFromTime(startOfHour(pipeline().TriggerTime), 1, 'Day'), 5, 2), '_', substring(subtractFromTime(startOfHour(pipeline().TriggerTime), 1, 'Day'), 8, 2), '_usea_bucket_', dataset().bucket)",
                            "type": "Expression"
                        },
                        "folderPath": {
                            "value": "@concat('friends/', substring(subtractFromTime(startOfHour(pipeline().TriggerTime), 1, 'Day'), 0, 4), '/', substring(subtractFromTime(startOfHour(pipeline().TriggerTime), 1, 'Day'), 5, 2))",
                            "type": "Expression"
                        },
                        "fileSystem": "raw"
                    }
                },
                "schema": {}
            },
            "dependsOn": [
                "[concat(variables('workspaceId'), '/linkedServices/synapse-test-actions-WorkspaceDefaultStorage')]"
            ]
        },
        {
			"name": "[concat(parameters('workspaceName'), '/pl_copy_friends_daily')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEachCopyFriendsBucketOne",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.bucket_one",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopyFriendsBucketOne",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "CosmosDbSqlApiSource",
											"query": {
												"value": "@concat('select * from c where c.id = ''Friend'' and ', string(div(sub(ticks(subtractFromTime(startOfHour(pipeline().TriggerTime), 1, 'Day')), ticks('1970-01-01T00:00:00Z')), 10000000)), ' < c._ts and startswith(c.FriendId, ''', item(), ''')')",
												"type": "Expression"
											},
											"preferredRegions": [],
											"detectDatetime": true
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_cosmosdb_devops_usea",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adls2_sttestactions_usea",
											"type": "DatasetReference",
											"parameters": {
												"bucket": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "ForEachCopyFriendsBucketTwo",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ForEachCopyFriendsBucketOne",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.bucket_one",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopyFriendsBucketTwo",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "CosmosDbSqlApiSource",
											"query": {
												"value": "@concat('select * from c where c.id = ''Friend'' and ', string(div(sub(ticks(subtractFromTime(startOfHour(pipeline().TriggerTime), 1, 'Day')), ticks('1970-01-01T00:00:00Z')), 10000000)), ' < c._ts and startswith(c.FriendId, ''', item(), ''')')",
												"type": "Expression"
											},
											"preferredRegions": [],
											"detectDatetime": true
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ds_cosmosdb_devops_usea",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adls2_sttestactions_usea",
											"type": "DatasetReference",
											"parameters": {
												"bucket": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "nb-hello-world",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "ForEachCopyFriendsBucketTwo",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "nb-hello-world",
								"type": "NotebookReference"
							},
							"snapshot": true
						}
					}
				],
				"parameters": {
					"bucket_one": {
						"type": "array",
						"defaultValue": [
							"a",
							"b"
						]
					},
					"bucket_two": {
						"type": "string",
						"defaultValue": [
							"c",
							"d"
						]
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/nb-hello-world')]",
				"[concat(variables('workspaceId'), '/datasets/ds_cosmosdb_devops_usea')]",
				"[concat(variables('workspaceId'), '/datasets/ds_adls2_sttestactions_usea')]"
			]
		}
    ]
}